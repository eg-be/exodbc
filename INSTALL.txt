INSTALL
=======
Find updated versions of this document at: https://exodbc.elisium.ch

This document describes some hints on how to build exobc and its components
(tests, samples) using cmake. Please follow cmkake instructions on how to
obtain cmake for your platform: https://cmake.org/

Quickstart
==========
A short manual on how to build libexodbc only:
From exOdbc top-level directory:
Create a directory for the build-environment and cd into it:
  
  mkdir build
  cd build

Tell cmake where to look for the required boost header-only libraries by
setting BOOST_ROOT (or alternatively, BOOST_INCLUDEDIR) and let cmake prepare
the environment to build only the core exodbc library by setting BUILD_TESTS
and BUILD_SAMPLES to samples OFF:

  set BOOST_ROOT=e:/lib/boost_1_62_0
  cmake -DBUILD_TESTS=OFF -DBUILD_SAMPLES=OFF ..

Finally build the library:

  cmake --build . --config Release
  cmake --build . --config Debug
 
The resulting binaries have been placed in 'bin\[Debug|Release]'.

Full build
==========
Build all components including the tests and samples:

From exOdbc top-level directory:
Create a directory for the build-environment and cd into it:

  mkdir build
  cd build

Tell cmake where to look for the required boost libraries. boost-filesystem and
boost-system are required to build the tests.

  set BOOST_ROOT=e:/lib/boost_1_62_0
  cmake ..

or to prepare for a 64bit build:
  cmake -G "Visual Studio 14 2015 Win64" ..

Build all targets:
  
  cmake --build .

Install reference
=================

Options
-------
Some option variables may change the resulting cmake-configuration:

  BUILD_TESTS:    If set to ON, exodbctest is built. 
                  Default: ON
  BUILD_SAMPLES:  If set to ON, samples are built. 
                  Default: ON
  
and how dependencies are used:

  Boost_USE_STATIC_LIBS:  Set to ON to link against static libs of boost. 
                          Default: OFF
  BUILD_SHARED_LIBS:      Build shared or static libs. 
                          Default: ON

For example, to build 64bit vc140 without tests:
  cmake -G "Visual Studio 14 2015 Win64" -BUILD_TESTS=OFF ..

or to build 64bit vc140 as static lib and link against boost static libs:
  cmake -G "Visual Studio 14 2015 Win64" -DBoost_USE_STATIC_LIBS=ON -DBUILD_SHARED_LIBS=OFF ..
  
Dependencies
------------
libexodbc:
  - boost (header-only)
    
exOdbcTest
  - gtest
  - boost (with compiled libraries, only boost-filesystem)
  - libexodbc
  
Use something like this to build the minimal required boost components:
    bootstrap
    b2 --with-filesystem variant=debug link=shared threading=multi runtime-link=shared address-model=32
    b2 --with-filesystem variant=release link=shared threading=multi runtime-link=shared address-model=32
or for a 64bit generator:
    b2 --with-filesystem variant=debug link=shared threading=multi runtime-link=shared address-model=64
    b2 --with-filesystem variant=release link=shared threading=multi runtime-link=shared address-model=64

Clean build environment
-----------------------
# From build-environment directory:
cmake --build . --target clean

Start over (Clean cmake environment)
------------------------------------
# Simply remove the build-environment directory:
# From exOdbc top-level directory:
rmdir /S /Q build


Various hints and notes
-----------------------
- By default, shared libraries are built. This is configured in the
  CMakeLists.txt file inside the top-level directory, using
    SET(BUILD_SHARED_LIBS ON)

  



Configure exOdbc
----------------
# From exOdbc top-level directory:
# Create a directory for the build-environment and cd into it:
mkdir build
cd build

# invoke cmake and pass path to the boost-headers:
cmake -D BOOST_INCLUDEDIR=e:/lib/boost_1_62_0 ..
# or export BOOST_ROOT first:
# set BOOST_ROOT=e:/lib/boost_1_62_0
cmake ..

# or specify a different generator:
# cmake -G "Visual Studio 14 2015 Win64" -D BOOST_INCLUDEDIR=e:/lib/boost_1_62_0 ..

Build exOdbc
------------
# From build-environment directory:
# Build all targets:
cmake --build .

# Build a specific target:
cmake --build . --target exodbc
# The following targets are defined:
exodbc:    exodbc as a shared library ('.dll')
libexodbc: exodbc as a static library ('.lib')
# Note: On windows, all targets link to the shared runtime-library ('/MD' or '/MDd')

# Set build type:
cmake --build . --config Release --target exodbc


